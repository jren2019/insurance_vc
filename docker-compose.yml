version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oidc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: oidc_db
      POSTGRES_USER: oidc_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - oidc_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oidc_user -d oidc_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Backend
  backend:
    build:
      context: ./oidc_backend
      dockerfile: Dockerfile
    container_name: oidc_backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://oidc_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/oidc_db
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ISSUER=${ISSUER:-https://insurance-vc-nz.australiaeast.cloudapp.azure.com}
      - CONFIG_ID=${CONFIG_ID:-org.iso.18013.5.1.mDL}
    volumes:
      - ./oidc_backend:/app
      - backend_logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - oidc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Frontend (build only)
  frontend:
    build:
      context: ./oidc_frontend
      dockerfile: Dockerfile
    container_name: oidc_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_URL=${API_URL:-http://insurance-vc-nz.australiaeast.cloudapp.azure.com/api}
    volumes:
      - frontend_build:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - oidc_network

  # Nginx Reverse Proxy (single nginx service)
  nginx:
    image: nginx:alpine
    container_name: oidc_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - oidc_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://insurance-vc-nz.australiaeast.cloudapp.azure.com/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  frontend_build:
    driver: local
  nginx_logs:
    driver: local

networks:
  oidc_network:
    driver: bridge 